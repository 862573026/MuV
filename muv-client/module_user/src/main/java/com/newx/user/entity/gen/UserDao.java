package com.newx.user.entity.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.newx.user.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Salt = new Property(4, String.class, "salt", false, "SALT");
        public final static Property RealName = new Property(5, String.class, "realName", false, "REAL_NAME");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Sex = new Property(9, Byte.class, "sex", false, "SEX");
        public final static Property Status = new Property(10, Byte.class, "status", false, "STATUS");
        public final static Property CreateTime = new Property(11, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(12, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property CreateWhere = new Property(13, Byte.class, "createWhere", false, "CREATE_WHERE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"USERNAME\" TEXT," + // 2: username
                "\"PASSWORD\" TEXT," + // 3: password
                "\"SALT\" TEXT," + // 4: salt
                "\"REAL_NAME\" TEXT," + // 5: realName
                "\"AVATAR\" TEXT," + // 6: avatar
                "\"PHONE\" TEXT," + // 7: phone
                "\"EMAIL\" TEXT," + // 8: email
                "\"SEX\" INTEGER," + // 9: sex
                "\"STATUS\" INTEGER," + // 10: status
                "\"CREATE_TIME\" INTEGER," + // 11: createTime
                "\"UPDATE_TIME\" INTEGER," + // 12: updateTime
                "\"CREATE_WHERE\" INTEGER);"); // 13: createWhere
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getUid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String salt = entity.getSalt();
        if (salt != null) {
            stmt.bindString(5, salt);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(6, realName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        Byte sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(10, sex);
        }
 
        Byte status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(11, status);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(12, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(13, updateTime.getTime());
        }
 
        Byte createWhere = entity.getCreateWhere();
        if (createWhere != null) {
            stmt.bindLong(14, createWhere);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getUid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String salt = entity.getSalt();
        if (salt != null) {
            stmt.bindString(5, salt);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(6, realName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        Byte sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(10, sex);
        }
 
        Byte status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(11, status);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(12, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(13, updateTime.getTime());
        }
 
        Byte createWhere = entity.getCreateWhere();
        if (createWhere != null) {
            stmt.bindLong(14, createWhere);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // salt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // realName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : (byte) cursor.getShort(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : (byte) cursor.getShort(offset + 10), // status
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // createTime
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // updateTime
            cursor.isNull(offset + 13) ? null : (byte) cursor.getShort(offset + 13) // createWhere
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSalt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRealName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : (byte) cursor.getShort(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : (byte) cursor.getShort(offset + 10));
        entity.setCreateTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setUpdateTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCreateWhere(cursor.isNull(offset + 13) ? null : (byte) cursor.getShort(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
